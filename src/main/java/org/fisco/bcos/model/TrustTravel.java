package org.fisco.bcos.model;

import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.*;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class TrustTravel extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50613f27806100206000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e887cda1461012d57806310056fff1461018457806312588c571461022d5780631959a002146102ca5780635983e9741461038d5780635f0c6acf146103e45780638d248a081461054a578063991a74d6146105a1578063a31ae8f614610760578063a406c22214610915578063aa99d358146109b2578063ae20314614610a3b578063b2874f7c14610af7578063b43ec68814610bd6578063b7c74ff114610cb5578063ba99af7014610dee578063cd19e05814610eaa578063d84f55ee1461104f578063e9a734ff1461110b578063ef77687e146111d2578063f470426414611341578063f5ecbdfe14611552575b600080fd5b34801561013957600080fd5b5061016e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061168b565b6040518082815260200191505060405180910390f35b34801561019057600080fd5b506101eb600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506116d6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023957600080fd5b506102c860048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919050505061176e565b005b3480156102d657600080fd5b5061030b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118c6565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610351578082015181840152602081019050610336565b50505050905090810190601f16801561037e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561039957600080fd5b506103ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611982565b6040518082815260200191505060405180910390f35b3480156103f057600080fd5b50610491600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119d0565b6040518084151515158152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561050d5780820151818401526020810190506104f2565b50505050905090810190601f16801561053a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561055657600080fd5b5061058b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c1a565b6040518082815260200191505060405180910390f35b3480156105ad57600080fd5b5061066e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c68565b60405180841515151581526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156106bc5780820151818401526020810190506106a1565b50505050905090810190601f1680156106e95780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610722578082015181840152602081019050610707565b50505050905090810190601f16801561074f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561076c57600080fd5b50610913600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611eb7565b005b34801561092157600080fd5b506109b060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050612196565b005b3480156109be57600080fd5b50610a39600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122ee565b005b348015610a4757600080fd5b50610a7c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612348565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610abc578082015181840152602081019050610aa1565b50505050905090810190601f168015610ae95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b0357600080fd5b50610b4260048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612429565b604051808515151515815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b98578082015181840152602081019050610b7d565b50505050905090810190601f168015610bc55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610be257600080fd5b50610c2160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061268b565b604051808515151515815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610cc157600080fd5b50610d0060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128ed565b604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610d4a578082015181840152602081019050610d2f565b50505050905090810190601f168015610d775780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610db0578082015181840152602081019050610d95565b50505050905090810190601f168015610ddd5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610dfa57600080fd5b50610e2f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b66565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e6f578082015181840152602081019050610e54565b50505050905090810190601f168015610e9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610eb657600080fd5b50610ef560048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c16565b60405180806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015610f43578082015181840152602081019050610f28565b50505050905090810190601f168015610f705780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015610fa9578082015181840152602081019050610f8e565b50505050905090810190601f168015610fd65780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b8381101561100f578082015181840152602081019050610ff4565b50505050905090810190601f16801561103c5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561105b57600080fd5b50611090600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fa1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156110d05780820151818401526020810190506110b5565b50505050905090810190601f1680156110fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561111757600080fd5b506111b8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613084565b604051808215151515815260200191505060405180910390f35b3480156111de57600080fd5b5061133f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050613235565b005b34801561134d57600080fd5b5061138c60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134f0565b604051808060200180602001806020018060200186815260200185810385528a818151815260200191508051906020019080838360005b838110156113de5780820151818401526020810190506113c3565b50505050905090810190601f16801561140b5780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b83811015611444578082015181840152602081019050611429565b50505050905090810190601f1680156114715780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b838110156114aa57808201518184015260208101905061148f565b50505050905090810190601f1680156114d75780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b838110156115105780820151818401526020810190506114f5565b50505050905090810190601f16801561153d5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561155e57600080fd5b5061159d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613982565b604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156115e75780820151818401526020810190506115cc565b50505050905090810190601f1680156116145780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561164d578082015181840152602081019050611632565b50505050905090810190601f16801561167a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60006002826040518082805190602001908083835b60208310151561171057805182526020820191506020810190506020830392506116eb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611776613c46565b60016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201868154811015156117c657fe5b90600052602060002090600d0201600801541415156117e457600080fd5b608060405190810160405280428152602001848152602001838152602001600115158152509050806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018681548110151561185a57fe5b90600052602060002090600d0201600901600082015181600001556020820151816001019080519060200190611891929190613c71565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050505050505050565b6000602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119725780601f1061194757610100808354040283529160200191611972565b820191906000526020600020905b81548152906001019060200180831161195557829003601f168201915b5050505050908060010154905082565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805490509050919050565b600060606000611ae66002866040518082805190602001908083835b602083101515611a1157805182526020820191506020810190506020830392506119ec565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611adb5780601f10611ab057610100808354040283529160200191611adb565b820191906000526020600020905b815481529060010190602001808311611abe57829003601f168201915b505050505085613084565b15611bbe5760016002866040518082805190602001908083835b602083101515611b255780518252602082019150602081019050602083039250611b00565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040805190810160405280601081526020017f4c6f67696e207375636365737366756c0000000000000000000000000000000081525090925092509250611c13565b60007379a7a47806d2dfee07b42662c4f65816461d14d26040805190810160405280600a81526020017f4c6f67696e206661696c00000000000000000000000000000000000000000000815250909250925092505b9250925092565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490509050919050565b6000606080600073ffffffffffffffffffffffffffffffffffffffff166002876040518082805190602001908083835b602083101515611cbd5780518252602082019150602081019050602083039250611c98565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d3657600080fd5b846002876040518082805190602001908083835b602083101515611d6f5780518252602082019150602081019050602083039250611d4a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190611db8929190613cf1565b50836002876040518082805190602001908083835b602083101515611df25780518252602082019150602081019050602083039250611dcd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611e6f84613bfb565b6001866040805190810160405280601481526020017f5265676973746572207375636365737366756c2100000000000000000000000081525092509250925093509350939050565b611ebf613d71565b611ec7613c46565b611ecf613da1565b60a0604051908101604052808b81526020018a815260200189815260200188815260200186815250925060806040519081016040528060008152602001602060405190810160405280600081525081526020016005815260200160001515815250915060c0604051908101604052804281526020018481526020018781526020016040805190810160405280600e81526020017f696e697469616c697a6174696f6e00000000000000000000000000000000000081525081526020018581526020018381525090506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819080600181540180825580915050906001820390600052602060002090600d020160009091929091909150600082015181600001556020820151816001016000820151816000019080519060200190612033929190613c71565b506020820151816001019080519060200190612050929190613c71565b50604082015181600201908051906020019061206d929190613c71565b50606082015181600301908051906020019061208a929190613c71565b5060808201518160040155505060408201518160060190805190602001906120b3929190613c71565b5060608201518160070190805190602001906120d0929190613c71565b506080820151816008015560a08201518160090160008201518160000155602082015181600101908051906020019061210a929190613c71565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055505050505050846000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825403925050819055505050505050505050505050565b61219e613c46565b60016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301868154811015156121ee57fe5b90600052602060002090600c02016007015414151561220c57600080fd5b608060405190810160405280428152602001848152602001838152602001600115158152509050806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018681548110151561228257fe5b90600052602060002090600c02016008016000820151816000015560208201518160010190805190602001906122b9929190613c71565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050505050505050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190612343929190613cf1565b505050565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561241d5780601f106123f25761010080835404028352916020019161241d565b820191906000526020600020905b81548152906001019060200180831161240057829003601f168201915b50505050509050919050565b600060606000806000806000806000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a81548110151561248457fe5b90600052602060002090600c020160080160030160009054906101000a900460ff1693506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a8154811015156124f657fe5b90600052602060002090600c020160080160010192506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a81548110151561255a57fe5b90600052602060002090600c02016008016002015491506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a8154811015156125bf57fe5b90600052602060002090600c020160080160000154905083838383828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561266f5780601f106126445761010080835404028352916020019161266f565b820191906000526020600020905b81548152906001019060200180831161265257829003601f168201915b5050505050925097509750975097505050505092959194509250565b600060606000806000806000806000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018a8154811015156126e657fe5b90600052602060002090600d020160090160030160009054906101000a900460ff1693506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018a81548110151561275857fe5b90600052602060002090600d020160090160010192506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018a8154811015156127bc57fe5b90600052602060002090600d02016009016002015491506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018a81548110151561282157fe5b90600052602060002090600d020160090160000154905083838383828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128d15780601f106128a6576101008083540402835291602001916128d1565b820191906000526020600020905b8154815290600101906020018083116128b457829003601f168201915b5050505050925097509750975097505050505092959194509250565b600060608060008060008060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018881548110151561294557fe5b90600052602060002090600d02016000015492506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201888154811015156129a757fe5b90600052602060002090600d020160060191506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020188815481101515612a0857fe5b90600052602060002090600d02016007019050828282818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ab35780601f10612a8857610100808354040283529160200191612ab3565b820191906000526020600020905b815481529060010190602001808311612a9657829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b4f5780601f10612b2457610100808354040283529160200191612b4f565b820191906000526020600020905b815481529060010190602001808311612b3257829003601f168201915b505050505090509550955095505050509250925092565b60016020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c0e5780601f10612be357610100808354040283529160200191612c0e565b820191906000526020600020905b815481529060010190602001808311612bf157829003601f168201915b505050505081565b606080606060008060008060008060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a815481101515612c7157fe5b90600052602060002090600c020160010160000193506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a815481101515612cd557fe5b90600052602060002090600c020160010160010192506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a815481101515612d3957fe5b90600052602060002090600c020160010160020191506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018a815481101515612d9d57fe5b90600052602060002090600c020160010160030154905083838383838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e4d5780601f10612e2257610100808354040283529160200191612e4d565b820191906000526020600020905b815481529060010190602001808311612e3057829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ee95780601f10612ebe57610100808354040283529160200191612ee9565b820191906000526020600020905b815481529060010190602001808311612ecc57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f855780601f10612f5a57610100808354040283529160200191612f85565b820191906000526020600020905b815481529060010190602001808311612f6857829003601f168201915b5050505050915097509750975097505050505092959194509250565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130785780601f1061304d57610100808354040283529160200191613078565b820191906000526020600020905b81548152906001019060200180831161305b57829003601f168201915b50505050509050919050565b6000816040516020018082805190602001908083835b6020831015156130bf578051825260208201915060208101905060208303925061309a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156131285780518252602082019150602081019050602083039250613103565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515613192578051825260208201915060208101905060208303925061316d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156131fb57805182526020820191506020810190506020830392506131d6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614905092915050565b61323d613de5565b613245613c46565b61324d613e0e565b6080604051908101604052808a815260200189815260200188815260200187815250925060806040519081016040528060008152602001602060405190810160405280600081525081526020016005815260200160001515815250915060c0604051908101604052804281526020018481526020018681526020016040805190810160405280600e81526020017f696e697469616c697a6174696f6e00000000000000000000000000000000000081525081526020018581526020018381525090506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819080600181540180825580915050906001820390600052602060002090600c0201600090919290919091506000820151816000015560208201518160010160008201518160000190805190602001906133ab929190613c71565b5060208201518160010190805190602001906133c8929190613c71565b5060408201518160020190805190602001906133e5929190613c71565b50606082015181600301555050604082015181600501908051906020019061340e929190613c71565b50606082015181600601908051906020019061342b929190613c71565b506080820151816007015560a082015181600801600082015181600001556020820151816001019080519060200190613465929190613c71565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055505050505050856000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254039250508190555050505050505050505050565b6060806060806000806000806000806000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c81548110151561354d57fe5b90600052602060002090600d020160010160000194506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c8154811015156135b157fe5b90600052602060002090600d020160010160010193506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c81548110151561361557fe5b90600052602060002090600d020160010160020192506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c81548110151561367957fe5b90600052602060002090600d020160010160030191506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c8154811015156136dd57fe5b90600052602060002090600d02016001016004015490508484848484848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561378e5780601f106137635761010080835404028352916020019161378e565b820191906000526020600020905b81548152906001019060200180831161377157829003601f168201915b50505050509450838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561382a5780601f106137ff5761010080835404028352916020019161382a565b820191906000526020600020905b81548152906001019060200180831161380d57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138c65780601f1061389b576101008083540402835291602001916138c6565b820191906000526020600020905b8154815290600101906020018083116138a957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139625780601f1061393757610100808354040283529160200191613962565b820191906000526020600020905b81548152906001019060200180831161394557829003601f168201915b505050505091509950995099509950995050505050509295509295909350565b600060608060008060008060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301888154811015156139da57fe5b90600052602060002090600c02016000015492506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030188815481101515613a3c57fe5b90600052602060002090600c020160050191506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030188815481101515613a9d57fe5b90600052602060002090600c02016006019050828282818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b485780601f10613b1d57610100808354040283529160200191613b48565b820191906000526020600020905b815481529060010190602001808311613b2b57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613be45780601f10613bb957610100808354040283529160200191613be4565b820191906000526020600020905b815481529060010190602001808311613bc757829003601f168201915b505050505090509550955095505050509250925092565b6127106000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b6080604051908101604052806000815260200160608152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613cb257805160ff1916838001178555613ce0565b82800160010185558215613ce0579182015b82811115613cdf578251825591602001919060010190613cc4565b5b509050613ced9190613e52565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613d3257805160ff1916838001178555613d60565b82800160010185558215613d60579182015b82811115613d5f578251825591602001919060010190613d44565b5b509050613d6d9190613e52565b5090565b60a06040519081016040528060608152602001606081526020016060815260200160608152602001600081525090565b6101a06040519081016040528060008152602001613dbd613e77565b8152602001606081526020016060815260200160008152602001613ddf613ea7565b81525090565b608060405190810160405280606081526020016060815260200160608152602001600081525090565b6101806040519081016040528060008152602001613e2a613ed2565b8152602001606081526020016060815260200160008152602001613e4c613ea7565b81525090565b613e7491905b80821115613e70576000816000905550600101613e58565b5090565b90565b60a06040519081016040528060608152602001606081526020016060815260200160608152602001600081525090565b6080604051908101604052806000815260200160608152602001600081526020016000151581525090565b6080604051908101604052806060815260200160608152602001606081526020016000815250905600a165627a7a72305820d67e3fa8dde9edca84c46da8b86158e180ed58bb78f90301081b33e2aaf9f8600029";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"GetUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"addCommentForHotel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"Owner_money\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"}],\"name\":\"UserLogin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserSceneCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"UserRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_hotel\",\"type\":\"string\"},{\"name\":\"_roomType\",\"type\":\"string\"},{\"name\":\"_fromDate\",\"type\":\"string\"},{\"name\":\"_toDate\",\"type\":\"string\"},{\"name\":\"_OTA\",\"type\":\"string\"},{\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"name\":\"f2\",\"type\":\"uint256\"}],\"name\":\"initializeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"addCommentForScene\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeUserName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAccountType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserSceneOrdersComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOtherScene\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s1\",\"type\":\"string\"},{\"name\":\"s2\",\"type\":\"string\"}],\"name\":\"compareStringsbyBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_province\",\"type\":\"string\"},{\"name\":\"_city\",\"type\":\"string\"},{\"name\":\"s_name\",\"type\":\"string\"},{\"name\":\"s_price\",\"type\":\"uint256\"},{\"name\":\"_OTA\",\"type\":\"string\"},{\"name\":\"f1\",\"type\":\"uint256\"}],\"name\":\"bookOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersRoom\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserSceneOrdersInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_GETUSERMONEY = "getUserMoney";

    public static final String FUNC_GETUSERADDRESS = "GetUserAddress";

    public static final String FUNC_ADDCOMMENTFORHOTEL = "addCommentForHotel";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_GETUSERORDERSCOUNT = "getUserOrdersCount";

    public static final String FUNC_USERLOGIN = "UserLogin";

    public static final String FUNC_GETUSERSCENECOUNT = "getUserSceneCount";

    public static final String FUNC_USERREGISTER = "UserRegister";

    public static final String FUNC_INITIALIZEORDER = "initializeOrder";

    public static final String FUNC_ADDCOMMENTFORSCENE = "addCommentForScene";

    public static final String FUNC_CHANGEUSERNAME = "changeUserName";

    public static final String FUNC_GETACCOUNTTYPE = "getAccountType";

    public static final String FUNC_GETUSERSCENEORDERSCOMMENT = "getUserSceneOrdersComment";

    public static final String FUNC_GETUSERORDERSCOMMENT = "getUserOrdersComment";

    public static final String FUNC_GETUSERORDERSINFO = "getUserOrdersInfo";

    public static final String FUNC_ACCOUNTTYPE = "accountType";

    public static final String FUNC_GETUSEROTHERSCENE = "getUserOtherScene";

    public static final String FUNC_GETUSERNAME = "getUserName";

    public static final String FUNC_COMPARESTRINGSBYBYTES = "compareStringsbyBytes";

    public static final String FUNC_BOOKORDER = "bookOrder";

    public static final String FUNC_GETUSERORDERSROOM = "getUserOrdersRoom";

    public static final String FUNC_GETUSERSCENEORDERSINFO = "getUserSceneOrdersInfo";

    @Deprecated
    protected TrustTravel(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TrustTravel(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TrustTravel(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TrustTravel(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> getUserMoney(String _addr) {
        final Function function = new Function(FUNC_GETUSERMONEY, 
                Arrays.<Type>asList(new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> GetUserAddress(String username) {
        final Function function = new Function(FUNC_GETUSERADDRESS,
                Arrays.<Type>asList(new Utf8String(username)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addCommentForHotel(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORHOTEL,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr),
                new Utf8String(content),
                new Uint256(score)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addCommentForHotel(BigInteger _idx, String _addr, String content, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORHOTEL,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr),
                new Utf8String(content),
                new Uint256(score)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addCommentForHotelSeq(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORHOTEL,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr),
                new Utf8String(content),
                new Uint256(score)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> userInfo(String param0) {
        final Function function = new Function(FUNC_USERINFO,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUserOrdersCount(String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSCOUNT,
                Arrays.<Type>asList(new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<Boolean, String, String>> UserLogin(String username, String passwd) {
        final Function function = new Function(FUNC_USERLOGIN,
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(passwd)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<Boolean, String, String>>(
                new Callable<Tuple3<Boolean, String, String>>() {
                    @Override
                    public Tuple3<Boolean, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, String>(
                                (Boolean) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUserSceneCount(String _addr) {
        final Function function = new Function(FUNC_GETUSERSCENECOUNT,
                Arrays.<Type>asList(new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> UserRegister(String username, String passwd, String _addr) {
        final Function function = new Function(
                FUNC_USERREGISTER,
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(passwd),
                new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void UserRegister(String username, String passwd, String _addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_USERREGISTER,
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(passwd),
                new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String UserRegisterSeq(String username, String passwd, String _addr) {
        final Function function = new Function(
                FUNC_USERREGISTER,
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(passwd),
                new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> initializeOrder(String _addr, String _hotel, String _roomType, String _fromDate, String _toDate, String _OTA, BigInteger _totalPrice, BigInteger f2) {
        final Function function = new Function(
                FUNC_INITIALIZEORDER,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_hotel),
                new Utf8String(_roomType),
                new Utf8String(_fromDate),
                new Utf8String(_toDate),
                new Utf8String(_OTA),
                new Uint256(_totalPrice),
                new Uint256(f2)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void initializeOrder(String _addr, String _hotel, String _roomType, String _fromDate, String _toDate, String _OTA, BigInteger _totalPrice, BigInteger f2, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INITIALIZEORDER,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_hotel),
                new Utf8String(_roomType),
                new Utf8String(_fromDate),
                new Utf8String(_toDate),
                new Utf8String(_OTA),
                new Uint256(_totalPrice),
                new Uint256(f2)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initializeOrderSeq(String _addr, String _hotel, String _roomType, String _fromDate, String _toDate, String _OTA, BigInteger _totalPrice, BigInteger f2) {
        final Function function = new Function(
                FUNC_INITIALIZEORDER,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_hotel),
                new Utf8String(_roomType),
                new Utf8String(_fromDate),
                new Utf8String(_toDate),
                new Utf8String(_OTA),
                new Uint256(_totalPrice),
                new Uint256(f2)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> addCommentForScene(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORSCENE,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr),
                new Utf8String(content),
                new Uint256(score)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addCommentForScene(BigInteger _idx, String _addr, String content, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORSCENE,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr),
                new Utf8String(content),
                new Uint256(score)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addCommentForSceneSeq(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORSCENE,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr),
                new Utf8String(content),
                new Uint256(score)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> changeUserName(String _addr, String _name) {
        final Function function = new Function(
                FUNC_CHANGEUSERNAME,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void changeUserName(String _addr, String _name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEUSERNAME,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String changeUserNameSeq(String _addr, String _name) {
        final Function function = new Function(
                FUNC_CHANGEUSERNAME,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getAccountType(String _addr) {
        final Function function = new Function(FUNC_GETACCOUNTTYPE,
                Arrays.<Type>asList(new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<Boolean, String, BigInteger, BigInteger>> getUserSceneOrdersComment(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERSCENEORDERSCOMMENT,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<Boolean, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<Boolean, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<Boolean, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Boolean, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<Boolean, String, BigInteger, BigInteger>> getUserOrdersComment(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSCOMMENT,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<Boolean, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<Boolean, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<Boolean, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Boolean, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, String, String>> getUserOrdersInfo(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSINFO,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, String>>(
                new Callable<Tuple3<BigInteger, String, String>>() {
                    @Override
                    public Tuple3<BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> accountType(String param0) {
        final Function function = new Function(FUNC_ACCOUNTTYPE,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<String, String, String, BigInteger>> getUserOtherScene(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSEROTHERSCENE,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, String, String, BigInteger>>(
                new Callable<Tuple4<String, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> getUserName(String _addr) {
        final Function function = new Function(FUNC_GETUSERNAME,
                Arrays.<Type>asList(new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> compareStringsbyBytes(String s1, String s2) {
        final Function function = new Function(FUNC_COMPARESTRINGSBYBYTES,
                Arrays.<Type>asList(new Utf8String(s1),
                new Utf8String(s2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> bookOrder(String _addr, String _province, String _city, String s_name, BigInteger s_price, String _OTA, BigInteger f1) {
        final Function function = new Function(
                FUNC_BOOKORDER,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_province),
                new Utf8String(_city),
                new Utf8String(s_name),
                new Uint256(s_price),
                new Utf8String(_OTA),
                new Uint256(f1)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void bookOrder(String _addr, String _province, String _city, String s_name, BigInteger s_price, String _OTA, BigInteger f1, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BOOKORDER,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_province),
                new Utf8String(_city),
                new Utf8String(s_name),
                new Uint256(s_price),
                new Utf8String(_OTA),
                new Uint256(f1)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String bookOrderSeq(String _addr, String _province, String _city, String s_name, BigInteger s_price, String _OTA, BigInteger f1) {
        final Function function = new Function(
                FUNC_BOOKORDER,
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_province),
                new Utf8String(_city),
                new Utf8String(s_name),
                new Uint256(s_price),
                new Utf8String(_OTA),
                new Uint256(f1)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserOrdersRoom(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSROOM,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, String, String>> getUserSceneOrdersInfo(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERSCENEORDERSINFO,
                Arrays.<Type>asList(new Uint256(_idx),
                new Address(_addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, String>>(
                new Callable<Tuple3<BigInteger, String, String>>() {
                    @Override
                    public Tuple3<BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static TrustTravel load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TrustTravel(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TrustTravel load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TrustTravel(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TrustTravel load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TrustTravel(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TrustTravel load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TrustTravel(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TrustTravel> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TrustTravel.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TrustTravel> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TrustTravel.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TrustTravel> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TrustTravel.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TrustTravel> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TrustTravel.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
