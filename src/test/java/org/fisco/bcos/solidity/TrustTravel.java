package org.fisco.bcos.solidity;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class TrustTravel extends Contract {
    public static final String BINARY = "";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"GetUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"addCommentForHotel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"Owner_money\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"setUserSceneOrderTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"}],\"name\":\"UserLogin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"setUserSceneOrderCommentTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"setUserOrderCommentTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"setUserOrderTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserSceneCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"UserRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"addCommentForScene\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeUserName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAccountType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserSceneOrdersComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOtherScene\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_detailaddr\",\"type\":\"string\"},{\"name\":\"_hotel\",\"type\":\"string\"},{\"name\":\"_roomType\",\"type\":\"string\"},{\"name\":\"_fromDate\",\"type\":\"string\"},{\"name\":\"_toDate\",\"type\":\"string\"},{\"name\":\"_OTA\",\"type\":\"string\"},{\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"name\":\"f2\",\"type\":\"uint256\"}],\"name\":\"initializeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s1\",\"type\":\"string\"},{\"name\":\"s2\",\"type\":\"string\"}],\"name\":\"compareStringsbyBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_province\",\"type\":\"string\"},{\"name\":\"_city\",\"type\":\"string\"},{\"name\":\"s_name\",\"type\":\"string\"},{\"name\":\"s_price\",\"type\":\"uint256\"},{\"name\":\"_OTA\",\"type\":\"string\"},{\"name\":\"f1\",\"type\":\"uint256\"}],\"name\":\"bookOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOrdersRoom\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserSceneOrdersInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Users\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_detailaddr\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hotel\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BookingHotel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"s_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BookingScene\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"CommentsInfo\",\"type\":\"event\"}]";

    public static final String FUNC_GETUSERMONEY = "getUserMoney";

    public static final String FUNC_GETUSERADDRESS = "GetUserAddress";

    public static final String FUNC_ADDCOMMENTFORHOTEL = "addCommentForHotel";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_SETUSERSCENEORDERTX = "setUserSceneOrderTx";

    public static final String FUNC_GETUSERORDERSCOUNT = "getUserOrdersCount";

    public static final String FUNC_USERLOGIN = "UserLogin";

    public static final String FUNC_SETUSERSCENEORDERCOMMENTTX = "setUserSceneOrderCommentTx";

    public static final String FUNC_SETUSERORDERCOMMENTTX = "setUserOrderCommentTx";

    public static final String FUNC_SETUSERORDERTX = "setUserOrderTx";

    public static final String FUNC_GETUSERSCENECOUNT = "getUserSceneCount";

    public static final String FUNC_USERREGISTER = "UserRegister";

    public static final String FUNC_ADDCOMMENTFORSCENE = "addCommentForScene";

    public static final String FUNC_CHANGEUSERNAME = "changeUserName";

    public static final String FUNC_GETACCOUNTTYPE = "getAccountType";

    public static final String FUNC_GETUSERSCENEORDERSCOMMENT = "getUserSceneOrdersComment";

    public static final String FUNC_GETUSERORDERSCOMMENT = "getUserOrdersComment";

    public static final String FUNC_GETUSERORDERSINFO = "getUserOrdersInfo";

    public static final String FUNC_ACCOUNTTYPE = "accountType";

    public static final String FUNC_GETUSEROTHERSCENE = "getUserOtherScene";

    public static final String FUNC_GETUSERNAME = "getUserName";

    public static final String FUNC_INITIALIZEORDER = "initializeOrder";

    public static final String FUNC_COMPARESTRINGSBYBYTES = "compareStringsbyBytes";

    public static final String FUNC_BOOKORDER = "bookOrder";

    public static final String FUNC_GETUSERORDERSROOM = "getUserOrdersRoom";

    public static final String FUNC_GETUSERSCENEORDERSINFO = "getUserSceneOrdersInfo";

    public static final Event USERS_EVENT = new Event("Users", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BOOKINGHOTEL_EVENT = new Event("BookingHotel", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOOKINGSCENE_EVENT = new Event("BookingScene", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event COMMENTSINFO_EVENT = new Event("CommentsInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected TrustTravel(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TrustTravel(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TrustTravel(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TrustTravel(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> getUserMoney(String _addr) {
        final Function function = new Function(FUNC_GETUSERMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> GetUserAddress(String username) {
        final Function function = new Function(FUNC_GETUSERADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(username)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addCommentForHotel(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORHOTEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addCommentForHotel(BigInteger _idx, String _addr, String content, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORHOTEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(score)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addCommentForHotelSeq(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORHOTEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> userInfo(String param0) {
        final Function function = new Function(FUNC_USERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setUserSceneOrderTx(String _addr, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERSCENEORDERTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setUserSceneOrderTx(String _addr, String txHash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETUSERSCENEORDERTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setUserSceneOrderTxSeq(String _addr, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERSCENEORDERTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> getUserOrdersCount(String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<Boolean, String, String>> UserLogin(String username, String passwd) {
        final Function function = new Function(FUNC_USERLOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(username), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(passwd)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<Boolean, String, String>>(
                new Callable<Tuple3<Boolean, String, String>>() {
                    @Override
                    public Tuple3<Boolean, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setUserSceneOrderCommentTx(String _addr, BigInteger _idx, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERSCENEORDERCOMMENTTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setUserSceneOrderCommentTx(String _addr, BigInteger _idx, String txHash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETUSERSCENEORDERCOMMENTTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setUserSceneOrderCommentTxSeq(String _addr, BigInteger _idx, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERSCENEORDERCOMMENTTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setUserOrderCommentTx(String _addr, BigInteger _idx, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERORDERCOMMENTTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setUserOrderCommentTx(String _addr, BigInteger _idx, String txHash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETUSERORDERCOMMENTTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setUserOrderCommentTxSeq(String _addr, BigInteger _idx, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERORDERCOMMENTTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setUserOrderTx(String _addr, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERORDERTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setUserOrderTx(String _addr, String txHash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETUSERORDERTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setUserOrderTxSeq(String _addr, String txHash) {
        final Function function = new Function(
                FUNC_SETUSERORDERTX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> getUserSceneCount(String _addr) {
        final Function function = new Function(FUNC_GETUSERSCENECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> UserRegister(String username, String passwd, String _addr) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(username), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(passwd), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void UserRegister(String username, String passwd, String _addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(username), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(passwd), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String UserRegisterSeq(String username, String passwd, String _addr) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(username), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(passwd), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> addCommentForScene(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORSCENE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addCommentForScene(BigInteger _idx, String _addr, String content, BigInteger score, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORSCENE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(score)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addCommentForSceneSeq(BigInteger _idx, String _addr, String content, BigInteger score) {
        final Function function = new Function(
                FUNC_ADDCOMMENTFORSCENE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(score)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> changeUserName(String _addr, String _name) {
        final Function function = new Function(
                FUNC_CHANGEUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void changeUserName(String _addr, String _name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String changeUserNameSeq(String _addr, String _name) {
        final Function function = new Function(
                FUNC_CHANGEUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getAccountType(String _addr) {
        final Function function = new Function(FUNC_GETACCOUNTTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<Boolean, String, BigInteger, BigInteger, String>> getUserSceneOrdersComment(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERSCENEORDERSCOMMENT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<Boolean, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple5<Boolean, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple5<Boolean, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Boolean, String, BigInteger, BigInteger, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<Boolean, String, BigInteger, BigInteger, String>> getUserOrdersComment(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSCOMMENT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<Boolean, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple5<Boolean, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple5<Boolean, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Boolean, String, BigInteger, BigInteger, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<BigInteger, String, String, String>> getUserOrdersInfo(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, String>>(
                new Callable<Tuple4<BigInteger, String, String, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> accountType(String param0) {
        final Function function = new Function(FUNC_ACCOUNTTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<String, String, String, BigInteger>> getUserOtherScene(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSEROTHERSCENE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, String, String, BigInteger>>(
                new Callable<Tuple4<String, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> getUserName(String _addr) {
        final Function function = new Function(FUNC_GETUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initializeOrder(String _addr, String _detailaddr, String _hotel, String _roomType, String _fromDate, String _toDate, String _OTA, BigInteger _totalPrice, BigInteger f2) {
        final Function function = new Function(
                FUNC_INITIALIZEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_detailaddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_hotel), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_roomType), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fromDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_toDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_OTA), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_totalPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(f2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void initializeOrder(String _addr, String _detailaddr, String _hotel, String _roomType, String _fromDate, String _toDate, String _OTA, BigInteger _totalPrice, BigInteger f2, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INITIALIZEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_detailaddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_hotel), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_roomType), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fromDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_toDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_OTA), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_totalPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(f2)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initializeOrderSeq(String _addr, String _detailaddr, String _hotel, String _roomType, String _fromDate, String _toDate, String _OTA, BigInteger _totalPrice, BigInteger f2) {
        final Function function = new Function(
                FUNC_INITIALIZEORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_detailaddr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_hotel), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_roomType), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fromDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_toDate), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_OTA), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_totalPrice), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(f2)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Boolean> compareStringsbyBytes(String s1, String s2) {
        final Function function = new Function(FUNC_COMPARESTRINGSBYBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(s1), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(s2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> bookOrder(String _addr, String _province, String _city, String s_name, BigInteger s_price, String _OTA, BigInteger f1) {
        final Function function = new Function(
                FUNC_BOOKORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_province), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_city), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(s_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(s_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_OTA), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(f1)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void bookOrder(String _addr, String _province, String _city, String s_name, BigInteger s_price, String _OTA, BigInteger f1, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BOOKORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_province), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_city), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(s_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(s_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_OTA), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(f1)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String bookOrderSeq(String _addr, String _province, String _city, String s_name, BigInteger s_price, String _OTA, BigInteger f1) {
        final Function function = new Function(
                FUNC_BOOKORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_province), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_city), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(s_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(s_price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_OTA), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(f1)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple6<String, String, String, String, BigInteger, String>> getUserOrdersRoom(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERORDERSROOM, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, BigInteger, String>>(
                new Callable<Tuple6<String, String, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<BigInteger, String, String, String>> getUserSceneOrdersInfo(BigInteger _idx, String _addr) {
        final Function function = new Function(FUNC_GETUSERSCENEORDERSINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_idx), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, String>>(
                new Callable<Tuple4<BigInteger, String, String, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public List<UsersEventResponse> getUsersEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERS_EVENT, transactionReceipt);
        ArrayList<UsersEventResponse> responses = new ArrayList<UsersEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UsersEventResponse typedResponse = new UsersEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.username = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UsersEventResponse> usersEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, UsersEventResponse>() {
            @Override
            public UsersEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERS_EVENT, log);
                UsersEventResponse typedResponse = new UsersEventResponse();
                typedResponse.log = log;
                typedResponse.username = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UsersEventResponse> usersEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERS_EVENT));
        return usersEventFlowable(filter);
    }

    public List<BookingHotelEventResponse> getBookingHotelEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOOKINGHOTEL_EVENT, transactionReceipt);
        ArrayList<BookingHotelEventResponse> responses = new ArrayList<BookingHotelEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BookingHotelEventResponse typedResponse = new BookingHotelEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._detailaddr = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hotel = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BookingHotelEventResponse> bookingHotelEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, BookingHotelEventResponse>() {
            @Override
            public BookingHotelEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOOKINGHOTEL_EVENT, log);
                BookingHotelEventResponse typedResponse = new BookingHotelEventResponse();
                typedResponse.log = log;
                typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._detailaddr = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.hotel = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BookingHotelEventResponse> bookingHotelEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOOKINGHOTEL_EVENT));
        return bookingHotelEventFlowable(filter);
    }

    public List<BookingSceneEventResponse> getBookingSceneEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOOKINGSCENE_EVENT, transactionReceipt);
        ArrayList<BookingSceneEventResponse> responses = new ArrayList<BookingSceneEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BookingSceneEventResponse typedResponse = new BookingSceneEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.s_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BookingSceneEventResponse> bookingSceneEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, BookingSceneEventResponse>() {
            @Override
            public BookingSceneEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOOKINGSCENE_EVENT, log);
                BookingSceneEventResponse typedResponse = new BookingSceneEventResponse();
                typedResponse.log = log;
                typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.s_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BookingSceneEventResponse> bookingSceneEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOOKINGSCENE_EVENT));
        return bookingSceneEventFlowable(filter);
    }

    public List<CommentsInfoEventResponse> getCommentsInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(COMMENTSINFO_EVENT, transactionReceipt);
        ArrayList<CommentsInfoEventResponse> responses = new ArrayList<CommentsInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CommentsInfoEventResponse typedResponse = new CommentsInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._idx = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.content = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CommentsInfoEventResponse> commentsInfoEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CommentsInfoEventResponse>() {
            @Override
            public CommentsInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(COMMENTSINFO_EVENT, log);
                CommentsInfoEventResponse typedResponse = new CommentsInfoEventResponse();
                typedResponse.log = log;
                typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._idx = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.content = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CommentsInfoEventResponse> commentsInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMMENTSINFO_EVENT));
        return commentsInfoEventFlowable(filter);
    }

    @Deprecated
    public static TrustTravel load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TrustTravel(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TrustTravel load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TrustTravel(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TrustTravel load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TrustTravel(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TrustTravel load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TrustTravel(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TrustTravel> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TrustTravel.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TrustTravel> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TrustTravel.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TrustTravel> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TrustTravel.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TrustTravel> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TrustTravel.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UsersEventResponse {
        public Log log;

        public String username;

        public String addr;
    }

    public static class BookingHotelEventResponse {
        public Log log;

        public String _addr;

        public String _detailaddr;

        public String hotel;

        public BigInteger price;
    }

    public static class BookingSceneEventResponse {
        public Log log;

        public String _addr;

        public String s_name;

        public BigInteger price;
    }

    public static class CommentsInfoEventResponse {
        public Log log;

        public String _addr;

        public BigInteger _idx;

        public String content;

        public BigInteger score;
    }
}
